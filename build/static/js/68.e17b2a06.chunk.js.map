{"version":3,"sources":["components/agricoinpage/TableHistory.js"],"names":["columns","id","label","minWidth","align","createData","date","amount","status","rows","StickyHeadTable","React","page","setPage","rowsPerPage","setRowsPerPage","sx","width","overflow","maxHeight","stickyHeader","aria-label","map","column","key","style","slice","row","hover","role","tabIndex","code","value","format","rowsPerPageOptions","component","count","length","onPageChange","event","newPage","onRowsPerPageChange","target"],"mappings":"6PAUMA,EAAU,CACZ,CAAEC,GAAI,KAAMC,MAAO,KAAMC,SAAU,KACnC,CAAEF,GAAI,OAAQC,MAAO,OAAQC,SAAU,KACvC,CACEF,GAAI,SACJC,MAAO,SACPC,SAAU,IACVC,MAAO,SAET,CACEH,GAAI,SACJC,MAAO,SACPC,SAAU,IACVC,MAAO,UAKX,SAASC,EAAWJ,EAAIK,EAAMC,EAAQC,GAEpC,MAAO,CAAEP,KAAIK,OAAMC,SAAQC,UAG7B,IAAMC,EAAO,CACXJ,EAAW,OAAQ,aAAc,MAAO,WACxCA,EAAW,OAAQ,aAAc,MAAO,WACxCA,EAAW,OAAQ,aAAc,MAAO,WACxCA,EAAW,OAAQ,aAAc,MAAO,WACxCA,EAAW,OAAQ,aAAc,MAAO,YAI3B,SAASK,IACtB,MAAwBC,WAAe,GAAvC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsCF,WAAe,GAArD,mBAAOG,EAAP,KAAoBC,EAApB,KAWA,OACE,gBAAC,IAAD,CAAOC,GAAI,CAAEC,MAAO,OAAQC,SAAU,WACpC,gBAAC,IAAD,CAAgBF,GAAI,CAAEG,UAAW,MAC/B,gBAAC,IAAD,CAAOC,cAAY,EAACC,aAAW,gBAC7B,gBAAC,IAAD,KACE,gBAAC,IAAD,KACGrB,EAAQsB,KAAI,SAACC,GAAD,OACX,gBAAC,IAAD,CACEC,IAAKD,EAAOtB,GACZG,MAAOmB,EAAOnB,MACdqB,MAAO,CAAEtB,SAAUoB,EAAOpB,WAEzBoB,EAAOrB,YAKhB,gBAAC,IAAD,KACGO,EACEiB,MAAMd,EAAOE,EAAaF,EAAOE,EAAcA,GAC/CQ,KAAI,SAACK,GACJ,OACE,gBAAC,IAAD,CAAUC,OAAK,EAACC,KAAK,WAAWC,UAAW,EAAGN,IAAKG,EAAII,MACpD/B,EAAQsB,KAAI,SAACC,GACZ,IAAMS,EAAQL,EAAIJ,EAAOtB,IACzB,OACE,gBAAC,IAAD,CAAWuB,IAAKD,EAAOtB,GAAIG,MAAOmB,EAAOnB,OACtCmB,EAAOU,QAA2B,kBAAVD,EACrBT,EAAOU,OAAOD,GACdA,aAUxB,gBAAC,IAAD,CACEE,mBAAoB,CAAC,GAAI,GAAI,KAC7BC,UAAU,MACVC,MAAO3B,EAAK4B,OACZvB,YAAaA,EACbF,KAAMA,EACN0B,aAtDmB,SAACC,EAAOC,GAC/B3B,EAAQ2B,IAsDJC,oBAnD0B,SAACF,GAC/BxB,GAAgBwB,EAAMG,OAAOV,OAC7BnB,EAAQ","file":"static/js/68.e17b2a06.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\n\r\nconst columns = [\r\n    { id: 'id', label: 'ID', minWidth: 120 },\r\n    { id: 'date', label: 'Date', minWidth: 120 },\r\n    {\r\n      id: 'amount',\r\n      label: 'Amount',\r\n      minWidth: 120,\r\n      align: 'right',\r\n    },\r\n    {\r\n      id: 'status',\r\n      label: 'Status',\r\n      minWidth: 120,\r\n      align: 'right',\r\n    },\r\n  \r\n  ];\r\n  \r\n  function createData(id, date, amount, status) {\r\n   \r\n    return { id, date, amount, status, };\r\n  }\r\n  \r\n  const rows = [\r\n    createData('4545', '23/03/2022', '200', 'success'),\r\n    createData('4545', '24/03/2022', '200', 'success'),\r\n    createData('6766', '25/03/2022', '200', 'success'),\r\n    createData('7676', '26/03/2022', '200', 'success'),\r\n    createData('8989', '27/03/2022', '200', 'success'),\r\n   \r\n  ];\r\n  \r\n  export default function StickyHeadTable() {\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  \r\n    const handleChangePage = (event, newPage) => {\r\n      setPage(newPage);\r\n    };\r\n  \r\n    const handleChangeRowsPerPage = (event) => {\r\n      setRowsPerPage(+event.target.value);\r\n      setPage(0);\r\n    };\r\n  \r\n    return (\r\n      <Paper sx={{ width: '100%', overflow: 'hidden' }}>\r\n        <TableContainer sx={{ maxHeight: 440 }}>\r\n          <Table stickyHeader aria-label=\"sticky table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                {columns.map((column) => (\r\n                  <TableCell\r\n                    key={column.id}\r\n                    align={column.align}\r\n                    style={{ minWidth: column.minWidth }}\r\n                  >\r\n                    {column.label}\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row) => {\r\n                  return (\r\n                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                      {columns.map((column) => {\r\n                        const value = row[column.id];\r\n                        return (\r\n                          <TableCell key={column.id} align={column.align}>\r\n                            {column.format && typeof value === 'number'\r\n                              ? column.format(value)\r\n                              : value}\r\n                          </TableCell>\r\n                        );\r\n                      })}\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[10, 25, 100]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    );\r\n  }"],"sourceRoot":""}